{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54],"program":"/home/garry/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","num_traits","/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=115bcc3af0879bce","-C","extra-filename=-115bcc3af0879bce","--out-dir","/home/garry/rust/newsfeed/target/rls/debug/deps","-L","dependency=/home/garry/rust/newsfeed/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","/home/garry/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,103,97,114,114,121,47,114,117,115,116,47,110,101,119,115,102,101,101,100,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,110,117,109,95,116,114,97,105,116,115,45,49,49,53,98,99,99,51,97,102,48,56,55,57,98,99,101,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[16628660912732937679,14608305780784516301]},"crate_root":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src","external_crates":[{"file_name":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[772178867720458397,10513760593670507587]}},{"file_name":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17633954781163668134,3962627684191718065]}},{"file_name":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7858001605524721373,8369385247697161108]}}],"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16463,"line_start":11,"line_end":488,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":926,"byte_end":933,"line_start":28,"line_end":28,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3086},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":996,"byte_end":1006,"line_start":31,"line_end":31,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1115,"byte_end":1119,"line_start":33,"line_end":33,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1121,"byte_end":1132,"line_start":33,"line_end":33,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1134,"byte_end":1147,"line_start":33,"line_end":33,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1149,"byte_end":1156,"line_start":33,"line_end":33,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1158,"byte_end":1169,"line_start":33,"line_end":33,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":496},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1193,"byte_end":1196,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1198,"byte_end":1202,"line_start":34,"line_end":34,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1204,"byte_end":1207,"line_start":34,"line_end":34,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1209,"byte_end":1213,"line_start":34,"line_end":34,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1229,"byte_end":1236,"line_start":35,"line_end":35,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":582},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1266,"byte_end":1276,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1278,"byte_end":1288,"line_start":37,"line_end":37,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":592},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1290,"byte_end":1300,"line_start":37,"line_end":37,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1302,"byte_end":1312,"line_start":37,"line_end":37,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1314,"byte_end":1324,"line_start":37,"line_end":37,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":610},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1326,"byte_end":1336,"line_start":37,"line_end":37,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1338,"byte_end":1348,"line_start":37,"line_end":37,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":588},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1350,"byte_end":1360,"line_start":37,"line_end":37,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1383,"byte_end":1386,"line_start":39,"line_end":39,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1411,"byte_end":1417,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":660},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1419,"byte_end":1431,"line_start":40,"line_end":40,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":670},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1459,"byte_end":1469,"line_start":41,"line_end":41,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":696},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1495,"byte_end":1506,"line_start":42,"line_end":42,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":704},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1508,"byte_end":1519,"line_start":42,"line_end":42,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1521,"byte_end":1532,"line_start":42,"line_end":42,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1534,"byte_end":1545,"line_start":42,"line_end":42,"column_start":64,"column_end":75},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":700},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1547,"byte_end":1558,"line_start":42,"line_end":42,"column_start":77,"column_end":88},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1575,"byte_end":1586,"line_start":43,"line_end":43,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1588,"byte_end":1591,"line_start":43,"line_end":43,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1593,"byte_end":1596,"line_start":43,"line_end":43,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1614,"byte_end":1617,"line_start":44,"line_end":44,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1619,"byte_end":1626,"line_start":44,"line_end":44,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1628,"byte_end":1634,"line_start":44,"line_end":44,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1636,"byte_end":1642,"line_start":44,"line_end":44,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":808},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1644,"byte_end":1652,"line_start":44,"line_end":44,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16463,"line_start":11,"line_end":488,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":24},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":52},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":104},{"krate":0,"index":112},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":190},{"krate":0,"index":342},{"krate":0,"index":458},{"krate":0,"index":498},{"krate":0,"index":562},{"krate":0,"index":738},{"krate":0,"index":764},{"krate":0,"index":814},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":6388},{"krate":0,"index":6394},{"krate":0,"index":6400},{"krate":0,"index":6406},{"krate":0,"index":6412},{"krate":0,"index":6418},{"krate":0,"index":6424},{"krate":0,"index":6430},{"krate":0,"index":6436},{"krate":0,"index":6442},{"krate":0,"index":6448},{"krate":0,"index":6454},{"krate":0,"index":846},{"krate":0,"index":6460},{"krate":0,"index":6462},{"krate":0,"index":6466},{"krate":0,"index":6468},{"krate":0,"index":852},{"krate":0,"index":856},{"krate":0,"index":6472},{"krate":0,"index":6484},{"krate":0,"index":858}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/bounds.rs","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":158},{"krate":0,"index":170},{"krate":0,"index":176},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":872},{"krate":0,"index":878},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":896},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":178},{"krate":0,"index":932},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":938},{"krate":0,"index":944},{"krate":0,"index":950},{"krate":0,"index":956},{"krate":0,"index":962},{"krate":0,"index":968},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":986},{"krate":0,"index":992},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":1016},{"krate":0,"index":1022},{"krate":0,"index":1028},{"krate":0,"index":1034},{"krate":0,"index":1040},{"krate":0,"index":1046},{"krate":0,"index":1052},{"krate":0,"index":1058},{"krate":0,"index":1064}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":17944,"byte_end":17951,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":18087,"byte_end":18096,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":18181,"byte_end":18190,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/cast.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":220},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":1070},{"krate":0,"index":1100},{"krate":0,"index":1130},{"krate":0,"index":1160},{"krate":0,"index":1190},{"krate":0,"index":1220},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":1250},{"krate":0,"index":1280},{"krate":0,"index":1310},{"krate":0,"index":1340},{"krate":0,"index":1370},{"krate":0,"index":1400},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":1430},{"krate":0,"index":1532},{"krate":0,"index":284},{"krate":0,"index":314},{"krate":0,"index":1634},{"krate":0,"index":1664},{"krate":0,"index":1694},{"krate":0,"index":1724},{"krate":0,"index":1754},{"krate":0,"index":1784},{"krate":0,"index":1814},{"krate":0,"index":1844},{"krate":0,"index":1874},{"krate":0,"index":1904},{"krate":0,"index":1934},{"krate":0,"index":1964},{"krate":0,"index":1994},{"krate":0,"index":2024},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":330},{"krate":0,"index":2110},{"krate":0,"index":2114},{"krate":0,"index":2118},{"krate":0,"index":2122},{"krate":0,"index":2126},{"krate":0,"index":2130},{"krate":0,"index":2134},{"krate":0,"index":2138},{"krate":0,"index":2142},{"krate":0,"index":2146},{"krate":0,"index":2150},{"krate":0,"index":2154},{"krate":0,"index":2158},{"krate":0,"index":2162},{"krate":0,"index":332},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":2166},{"krate":0,"index":2170},{"krate":0,"index":2174},{"krate":0,"index":2178},{"krate":0,"index":2182},{"krate":0,"index":2186},{"krate":0,"index":2190},{"krate":0,"index":2194},{"krate":0,"index":2198},{"krate":0,"index":2202},{"krate":0,"index":2206},{"krate":0,"index":2210},{"krate":0,"index":2214},{"krate":0,"index":2218},{"krate":0,"index":2222},{"krate":0,"index":2226},{"krate":0,"index":2230},{"krate":0,"index":2234},{"krate":0,"index":2238},{"krate":0,"index":2242},{"krate":0,"index":2246},{"krate":0,"index":2250},{"krate":0,"index":2254},{"krate":0,"index":2258},{"krate":0,"index":2262},{"krate":0,"index":2266},{"krate":0,"index":2270},{"krate":0,"index":2274},{"krate":0,"index":2278},{"krate":0,"index":2282},{"krate":0,"index":2286},{"krate":0,"index":2290},{"krate":0,"index":2294},{"krate":0,"index":2298},{"krate":0,"index":2302},{"krate":0,"index":2306},{"krate":0,"index":2310},{"krate":0,"index":2314},{"krate":0,"index":2318},{"krate":0,"index":2322},{"krate":0,"index":2326},{"krate":0,"index":2330},{"krate":0,"index":2334},{"krate":0,"index":2338},{"krate":0,"index":2342},{"krate":0,"index":2346},{"krate":0,"index":2350},{"krate":0,"index":2354},{"krate":0,"index":2358},{"krate":0,"index":2362},{"krate":0,"index":2366},{"krate":0,"index":2370},{"krate":0,"index":2374},{"krate":0,"index":2378},{"krate":0,"index":2382},{"krate":0,"index":2386},{"krate":0,"index":2390},{"krate":0,"index":2394},{"krate":0,"index":2398},{"krate":0,"index":2402},{"krate":0,"index":2406},{"krate":0,"index":2410},{"krate":0,"index":2414},{"krate":0,"index":2418},{"krate":0,"index":2422},{"krate":0,"index":2426},{"krate":0,"index":2430},{"krate":0,"index":2434},{"krate":0,"index":2438},{"krate":0,"index":2442},{"krate":0,"index":2446},{"krate":0,"index":2450},{"krate":0,"index":2454},{"krate":0,"index":2458},{"krate":0,"index":2462},{"krate":0,"index":2466},{"krate":0,"index":2470},{"krate":0,"index":2474},{"krate":0,"index":2478},{"krate":0,"index":2482},{"krate":0,"index":2486},{"krate":0,"index":2490},{"krate":0,"index":2494},{"krate":0,"index":2498},{"krate":0,"index":2502},{"krate":0,"index":2506},{"krate":0,"index":2510},{"krate":0,"index":2514},{"krate":0,"index":2518},{"krate":0,"index":2522},{"krate":0,"index":2526},{"krate":0,"index":2530},{"krate":0,"index":2534},{"krate":0,"index":2538},{"krate":0,"index":2542},{"krate":0,"index":2546},{"krate":0,"index":2550},{"krate":0,"index":2554},{"krate":0,"index":2558},{"krate":0,"index":2562},{"krate":0,"index":2566},{"krate":0,"index":2570},{"krate":0,"index":2574},{"krate":0,"index":2578},{"krate":0,"index":2582},{"krate":0,"index":2586},{"krate":0,"index":2590},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":2602},{"krate":0,"index":2606},{"krate":0,"index":2610},{"krate":0,"index":2614},{"krate":0,"index":2618},{"krate":0,"index":2622},{"krate":0,"index":2626},{"krate":0,"index":2630},{"krate":0,"index":2634},{"krate":0,"index":2638},{"krate":0,"index":2642},{"krate":0,"index":2646},{"krate":0,"index":2650},{"krate":0,"index":2654},{"krate":0,"index":2658},{"krate":0,"index":2662},{"krate":0,"index":2666},{"krate":0,"index":2670},{"krate":0,"index":2674},{"krate":0,"index":2678},{"krate":0,"index":2682},{"krate":0,"index":2686},{"krate":0,"index":2690},{"krate":0,"index":2694},{"krate":0,"index":2698},{"krate":0,"index":2702},{"krate":0,"index":2706},{"krate":0,"index":2710},{"krate":0,"index":2714},{"krate":0,"index":2718},{"krate":0,"index":2722},{"krate":0,"index":2726},{"krate":0,"index":2730},{"krate":0,"index":2734},{"krate":0,"index":2738},{"krate":0,"index":2742},{"krate":0,"index":2746},{"krate":0,"index":2750},{"krate":0,"index":2754},{"krate":0,"index":2758},{"krate":0,"index":2762},{"krate":0,"index":2766},{"krate":0,"index":2770},{"krate":0,"index":2774},{"krate":0,"index":2778},{"krate":0,"index":2782},{"krate":0,"index":2786},{"krate":0,"index":2790},{"krate":0,"index":2794},{"krate":0,"index":2798},{"krate":0,"index":2802},{"krate":0,"index":2806},{"krate":0,"index":2810},{"krate":0,"index":2814},{"krate":0,"index":2818},{"krate":0,"index":2822},{"krate":0,"index":2826},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2838},{"krate":0,"index":2842},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2854},{"krate":0,"index":2858},{"krate":0,"index":2862},{"krate":0,"index":2866},{"krate":0,"index":2870},{"krate":0,"index":2874},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2886},{"krate":0,"index":2890},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":2902},{"krate":0,"index":2906},{"krate":0,"index":2910},{"krate":0,"index":2914},{"krate":0,"index":2918},{"krate":0,"index":2922},{"krate":0,"index":2926},{"krate":0,"index":2930},{"krate":0,"index":2934},{"krate":0,"index":2938},{"krate":0,"index":2942},{"krate":0,"index":2946},{"krate":0,"index":2950},{"krate":0,"index":2954},{"krate":0,"index":2958},{"krate":0,"index":2962},{"krate":0,"index":2966},{"krate":0,"index":2970},{"krate":0,"index":2974},{"krate":0,"index":2978},{"krate":0,"index":2982},{"krate":0,"index":2986},{"krate":0,"index":2990},{"krate":0,"index":2994},{"krate":0,"index":2998},{"krate":0,"index":3002},{"krate":0,"index":3006},{"krate":0,"index":3010},{"krate":0,"index":3014},{"krate":0,"index":3018},{"krate":0,"index":3022},{"krate":0,"index":3026},{"krate":0,"index":3030},{"krate":0,"index":3034},{"krate":0,"index":3038},{"krate":0,"index":3042},{"krate":0,"index":3046},{"krate":0,"index":3050}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21241,"byte_end":21252,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21328,"byte_end":21336,"line_start":15,"line_end":15,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21311,"byte_end":21320,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21503,"byte_end":21508,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21486,"byte_end":21495,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21670,"byte_end":21676,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21653,"byte_end":21662,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21840,"byte_end":21846,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21823,"byte_end":21832,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21996,"byte_end":22002,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22389,"byte_end":22396,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22351,"byte_end":22360,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22365,"byte_end":22381,"line_start":47,"line_end":47,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22539,"byte_end":22547,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22522,"byte_end":22531,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22714,"byte_end":22719,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22697,"byte_end":22706,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22881,"byte_end":22887,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22864,"byte_end":22873,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23051,"byte_end":23057,"line_start":72,"line_end":72,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23034,"byte_end":23043,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23221,"byte_end":23227,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23204,"byte_end":23213,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23614,"byte_end":23621,"line_start":88,"line_end":88,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23576,"byte_end":23585,"line_start":86,"line_end":86,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23590,"byte_end":23606,"line_start":87,"line_end":87,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23763,"byte_end":23769,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23746,"byte_end":23755,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23933,"byte_end":23939,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23916,"byte_end":23925,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32337,"byte_end":32350,"line_start":364,"line_end":364,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32533,"byte_end":32543,"line_start":368,"line_end":368,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `isize` to return an optional value of this type. If the\n value cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32516,"byte_end":32525,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32801,"byte_end":32808,"line_start":375,"line_end":375,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `i8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32784,"byte_end":32793,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33058,"byte_end":33066,"line_start":382,"line_end":382,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `i16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33041,"byte_end":33050,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33317,"byte_end":33325,"line_start":389,"line_end":389,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `i32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33300,"byte_end":33309,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33562,"byte_end":33570,"line_start":395,"line_end":395,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `i64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34060,"byte_end":34069,"line_start":406,"line_end":406,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `i128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34022,"byte_end":34031,"line_start":404,"line_end":404,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34036,"byte_end":34052,"line_start":405,"line_end":405,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34328,"byte_end":34338,"line_start":413,"line_end":413,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert a `usize` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34311,"byte_end":34320,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34596,"byte_end":34603,"line_start":420,"line_end":420,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `u8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34579,"byte_end":34588,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34853,"byte_end":34861,"line_start":427,"line_end":427,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `u16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34836,"byte_end":34845,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35112,"byte_end":35120,"line_start":434,"line_end":434,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `u32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35095,"byte_end":35104,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35357,"byte_end":35365,"line_start":440,"line_end":440,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `u64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35855,"byte_end":35864,"line_start":451,"line_end":451,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert an `u128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35817,"byte_end":35826,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35831,"byte_end":35847,"line_start":450,"line_end":450,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36121,"byte_end":36129,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert a `f32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36104,"byte_end":36113,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36379,"byte_end":36387,"line_start":465,"line_end":465,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Convert a `f64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36362,"byte_end":36371,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40633,"byte_end":40637,"line_start":635,"line_end":635,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40616,"byte_end":40625,"line_start":634,"line_end":634,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40771,"byte_end":40778,"line_start":640,"line_end":640,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":328}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40929,"byte_end":40933,"line_start":643,"line_end":643,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43067,"byte_end":43078,"line_start":718,"line_end":718,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":338}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait AsPrimitive should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43197,"byte_end":43200,"line_start":723,"line_end":723,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/float.rs","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":362},{"krate":0,"index":422},{"krate":0,"index":438},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":3086},{"krate":0,"index":3120},{"krate":0,"index":3154}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44851,"byte_end":44860,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45257,"byte_end":45265,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45628,"byte_end":45640,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45950,"byte_end":45953,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":46369,"byte_end":46377,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":46756,"byte_end":46765,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47185,"byte_end":47203,"line_start":116,"line_end":116,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47565,"byte_end":47572,"line_start":133,"line_end":133,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47950,"byte_end":47959,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48409,"byte_end":48415,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48392,"byte_end":48401,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48992,"byte_end":49003,"line_start":194,"line_end":194,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48975,"byte_end":48984,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":49604,"byte_end":49613,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":49587,"byte_end":49596,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":50211,"byte_end":50220,"line_start":240,"line_end":240,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":50194,"byte_end":50203,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51059,"byte_end":51067,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51700,"byte_end":51705,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51683,"byte_end":51692,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52551,"byte_end":52555,"line_start":325,"line_end":325,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52534,"byte_end":52543,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53387,"byte_end":53392,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53370,"byte_end":53379,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54483,"byte_end":54488,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54466,"byte_end":54475,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55209,"byte_end":55214,"line_start":434,"line_end":434,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55192,"byte_end":55201,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55919,"byte_end":55922,"line_start":463,"line_end":463,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55902,"byte_end":55911,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56846,"byte_end":56852,"line_start":497,"line_end":497,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56829,"byte_end":56838,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57714,"byte_end":57730,"line_start":530,"line_end":530,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57697,"byte_end":57706,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58460,"byte_end":58476,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58443,"byte_end":58452,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59109,"byte_end":59112,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59092,"byte_end":59101,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59909,"byte_end":59912,"line_start":616,"line_end":616,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59892,"byte_end":59901,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60667,"byte_end":60672,"line_start":649,"line_end":649,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60650,"byte_end":60659,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61266,"byte_end":61270,"line_start":673,"line_end":673,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61249,"byte_end":61258,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62187,"byte_end":62197,"line_start":701,"line_end":701,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62693,"byte_end":62703,"line_start":720,"line_end":720,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63462,"byte_end":63476,"line_start":743,"line_end":743,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3088},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":95986,"byte_end":95987,"line_start":1936,"line_end":1936,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3090},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96027,"byte_end":96036,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96083,"byte_end":96096,"line_start":1940,"line_end":1940,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96136,"byte_end":96145,"line_start":1942,"line_end":1942,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96191,"byte_end":96205,"line_start":1944,"line_end":1944,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96245,"byte_end":96254,"line_start":1946,"line_end":1946,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96294,"byte_end":96303,"line_start":1948,"line_end":1948,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3102},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96343,"byte_end":96352,"line_start":1950,"line_end":1950,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96392,"byte_end":96401,"line_start":1952,"line_end":1952,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96441,"byte_end":96450,"line_start":1954,"line_end":1954,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3108},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96490,"byte_end":96495,"line_start":1956,"line_end":1956,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96534,"byte_end":96538,"line_start":1958,"line_end":1958,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96578,"byte_end":96585,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3114},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96624,"byte_end":96630,"line_start":1962,"line_end":1962,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96682,"byte_end":96684,"line_start":1964,"line_end":1964,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96725,"byte_end":96731,"line_start":1966,"line_end":1966,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":458},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/identities.rs","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":468},{"krate":0,"index":474},{"krate":0,"index":3188},{"krate":0,"index":3194},{"krate":0,"index":3200},{"krate":0,"index":3206},{"krate":0,"index":3212},{"krate":0,"index":3218},{"krate":0,"index":3224},{"krate":0,"index":3230},{"krate":0,"index":3236},{"krate":0,"index":3242},{"krate":0,"index":3248},{"krate":0,"index":3254},{"krate":0,"index":3260},{"krate":0,"index":3266},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":488},{"krate":0,"index":3272},{"krate":0,"index":3276},{"krate":0,"index":3280},{"krate":0,"index":3284},{"krate":0,"index":3288},{"krate":0,"index":3292},{"krate":0,"index":3296},{"krate":0,"index":3300},{"krate":0,"index":3304},{"krate":0,"index":3308},{"krate":0,"index":3312},{"krate":0,"index":3316},{"krate":0,"index":3320},{"krate":0,"index":3324},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":496}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98503,"byte_end":98507,"line_start":5,"line_end":5,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":472}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99025,"byte_end":99029,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99131,"byte_end":99138,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99114,"byte_end":99123,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100049,"byte_end":100052,"line_start":75,"line_end":75,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":486}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100576,"byte_end":100579,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100888,"byte_end":100894,"line_start":99,"line_end":99,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100871,"byte_end":100880,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101753,"byte_end":101757,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101728,"byte_end":101745,"line_start":149,"line_end":149,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101867,"byte_end":101870,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101842,"byte_end":101859,"line_start":155,"line_end":155,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":498},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/int.rs","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":560},{"krate":0,"index":3328},{"krate":0,"index":3362},{"krate":0,"index":3396},{"krate":0,"index":3430},{"krate":0,"index":3464},{"krate":0,"index":3498},{"krate":0,"index":3532},{"krate":0,"index":3566},{"krate":0,"index":3600},{"krate":0,"index":3634},{"krate":0,"index":3668},{"krate":0,"index":3702}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102796,"byte_end":102803,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103478,"byte_end":103488,"line_start":40,"line_end":40,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103765,"byte_end":103776,"line_start":53,"line_end":53,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104072,"byte_end":104085,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104382,"byte_end":104396,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104791,"byte_end":104802,"line_start":96,"line_end":96,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":105214,"byte_end":105226,"line_start":111,"line_end":111,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":105669,"byte_end":105679,"line_start":128,"line_end":128,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":106155,"byte_end":106165,"line_start":145,"line_end":145,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":106612,"byte_end":106624,"line_start":162,"line_end":162,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107071,"byte_end":107083,"line_start":179,"line_end":179,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107388,"byte_end":107398,"line_start":193,"line_end":193,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107894,"byte_end":107901,"line_start":212,"line_end":212,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":108406,"byte_end":108413,"line_start":231,"line_end":231,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":108896,"byte_end":108901,"line_start":250,"line_end":250,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":109387,"byte_end":109392,"line_start":269,"line_end":269,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":109630,"byte_end":109633,"line_start":280,"line_end":280,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":562},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":620},{"krate":0,"index":652},{"krate":0,"index":668},{"krate":0,"index":678}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":564},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":582},{"krate":0,"index":586},{"krate":0,"index":3736},{"krate":0,"index":3740},{"krate":0,"index":3744},{"krate":0,"index":3748},{"krate":0,"index":3752},{"krate":0,"index":3756},{"krate":0,"index":3760},{"krate":0,"index":3764},{"krate":0,"index":3768},{"krate":0,"index":3772},{"krate":0,"index":3776},{"krate":0,"index":3780},{"krate":0,"index":588},{"krate":0,"index":3784},{"krate":0,"index":3788},{"krate":0,"index":3792},{"krate":0,"index":3796},{"krate":0,"index":3800},{"krate":0,"index":3804},{"krate":0,"index":3808},{"krate":0,"index":3812},{"krate":0,"index":3816},{"krate":0,"index":3820},{"krate":0,"index":3824},{"krate":0,"index":3828},{"krate":0,"index":592},{"krate":0,"index":3832},{"krate":0,"index":3836},{"krate":0,"index":3840},{"krate":0,"index":3844},{"krate":0,"index":3848},{"krate":0,"index":3852},{"krate":0,"index":3856},{"krate":0,"index":3860},{"krate":0,"index":3864},{"krate":0,"index":3868},{"krate":0,"index":3872},{"krate":0,"index":3876},{"krate":0,"index":596},{"krate":0,"index":3880},{"krate":0,"index":3884},{"krate":0,"index":3888},{"krate":0,"index":3892},{"krate":0,"index":3896},{"krate":0,"index":3900},{"krate":0,"index":3904},{"krate":0,"index":3908},{"krate":0,"index":3912},{"krate":0,"index":3916},{"krate":0,"index":3920},{"krate":0,"index":3924},{"krate":0,"index":600},{"krate":0,"index":3928},{"krate":0,"index":3932},{"krate":0,"index":3936},{"krate":0,"index":3940},{"krate":0,"index":3944},{"krate":0,"index":3948},{"krate":0,"index":3952},{"krate":0,"index":3956},{"krate":0,"index":3960},{"krate":0,"index":3964},{"krate":0,"index":3968},{"krate":0,"index":3972},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":3976},{"krate":0,"index":3980},{"krate":0,"index":3984},{"krate":0,"index":3988},{"krate":0,"index":3992},{"krate":0,"index":3996},{"krate":0,"index":4000},{"krate":0,"index":4004},{"krate":0,"index":4008},{"krate":0,"index":4012},{"krate":0,"index":4016},{"krate":0,"index":4020},{"krate":0,"index":610},{"krate":0,"index":614},{"krate":0,"index":4024},{"krate":0,"index":4028},{"krate":0,"index":4032},{"krate":0,"index":4036},{"krate":0,"index":4040},{"krate":0,"index":4044},{"krate":0,"index":4048},{"krate":0,"index":4052},{"krate":0,"index":4056},{"krate":0,"index":4060},{"krate":0,"index":4064},{"krate":0,"index":4068},{"krate":0,"index":616},{"krate":0,"index":4072},{"krate":0,"index":4076},{"krate":0,"index":4080},{"krate":0,"index":4084},{"krate":0,"index":4088},{"krate":0,"index":4092},{"krate":0,"index":4096},{"krate":0,"index":4100},{"krate":0,"index":4104},{"krate":0,"index":4108},{"krate":0,"index":4112},{"krate":0,"index":4116}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":582},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112413,"byte_end":112423,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":584}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112565,"byte_end":112576,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":582},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":588},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113554,"byte_end":113564,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":590}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113713,"byte_end":113724,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":588},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":592},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114457,"byte_end":114467,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":594}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114641,"byte_end":114652,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":592},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115425,"byte_end":115435,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":598}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115615,"byte_end":115626,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":596},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116412,"byte_end":116422,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":602}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":117216,"byte_end":117227,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":606},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118191,"byte_end":118201,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":608}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118851,"byte_end":118862,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":606},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":610},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119611,"byte_end":119621,"line_start":199,"line_end":199,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":612}],"decl_id":null,"docs":" Performs a left shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":120146,"byte_end":120157,"line_start":213,"line_end":213,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121190,"byte_end":121200,"line_start":244,"line_end":244,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":618}],"decl_id":null,"docs":" Performs a right shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121725,"byte_end":121736,"line_start":258,"line_end":258,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":628},{"krate":0,"index":634},{"krate":0,"index":640},{"krate":0,"index":646}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122525,"byte_end":122528,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":626}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122588,"byte_end":122594,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122873,"byte_end":122876,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":652},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":660},{"krate":0,"index":664},{"krate":0,"index":4120},{"krate":0,"index":4126},{"krate":0,"index":4132},{"krate":0,"index":4138},{"krate":0,"index":4144},{"krate":0,"index":4150},{"krate":0,"index":4156},{"krate":0,"index":4162},{"krate":0,"index":4168},{"krate":0,"index":4174},{"krate":0,"index":4180},{"krate":0,"index":4186},{"krate":0,"index":666},{"krate":0,"index":4192},{"krate":0,"index":4196},{"krate":0,"index":4200},{"krate":0,"index":4204},{"krate":0,"index":4208},{"krate":0,"index":4212},{"krate":0,"index":4216},{"krate":0,"index":4220},{"krate":0,"index":4224},{"krate":0,"index":4228},{"krate":0,"index":4232},{"krate":0,"index":4236}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":654},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":123993,"byte_end":123999,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":656},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124097,"byte_end":124103,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124164,"byte_end":124171,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":660},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124269,"byte_end":124281,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":662}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124362,"byte_end":124376,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":660},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":668},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":676},{"krate":0,"index":4240},{"krate":0,"index":4246},{"krate":0,"index":4252},{"krate":0,"index":4258},{"krate":0,"index":4264},{"krate":0,"index":4270},{"krate":0,"index":4276},{"krate":0,"index":4282},{"krate":0,"index":4288},{"krate":0,"index":4294},{"krate":0,"index":4300},{"krate":0,"index":4306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":670},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127157,"byte_end":127167,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":674}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127293,"byte_end":127307,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127459,"byte_end":127473,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":678},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":4312},{"krate":0,"index":4316},{"krate":0,"index":4320},{"krate":0,"index":4324},{"krate":0,"index":4328},{"krate":0,"index":4332},{"krate":0,"index":4336},{"krate":0,"index":4340},{"krate":0,"index":4344},{"krate":0,"index":4348},{"krate":0,"index":4352},{"krate":0,"index":4356},{"krate":0,"index":700},{"krate":0,"index":4360},{"krate":0,"index":4364},{"krate":0,"index":4368},{"krate":0,"index":4372},{"krate":0,"index":4376},{"krate":0,"index":4380},{"krate":0,"index":4384},{"krate":0,"index":4388},{"krate":0,"index":4392},{"krate":0,"index":4396},{"krate":0,"index":4400},{"krate":0,"index":4404},{"krate":0,"index":704},{"krate":0,"index":4408},{"krate":0,"index":4412},{"krate":0,"index":4416},{"krate":0,"index":4420},{"krate":0,"index":4424},{"krate":0,"index":4428},{"krate":0,"index":4432},{"krate":0,"index":4436},{"krate":0,"index":4440},{"krate":0,"index":4444},{"krate":0,"index":4448},{"krate":0,"index":4452},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":4456},{"krate":0,"index":4460},{"krate":0,"index":4464},{"krate":0,"index":4468},{"krate":0,"index":4472},{"krate":0,"index":4476},{"krate":0,"index":4480},{"krate":0,"index":4484},{"krate":0,"index":4488},{"krate":0,"index":4492},{"krate":0,"index":4496},{"krate":0,"index":4500},{"krate":0,"index":714},{"krate":0,"index":4504},{"krate":0,"index":4508},{"krate":0,"index":4512},{"krate":0,"index":4516},{"krate":0,"index":4520},{"krate":0,"index":4524},{"krate":0,"index":4528},{"krate":0,"index":4532},{"krate":0,"index":4536},{"krate":0,"index":4540},{"krate":0,"index":4544},{"krate":0,"index":4548},{"krate":0,"index":718},{"krate":0,"index":722},{"krate":0,"index":726},{"krate":0,"index":730},{"krate":0,"index":734}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":696},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128681,"byte_end":128692,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":698}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128851,"byte_end":128863,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":696},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":700},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129575,"byte_end":129586,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":702}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129748,"byte_end":129760,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":704},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130475,"byte_end":130486,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":706}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130651,"byte_end":130663,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":704},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131632,"byte_end":131643,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":712}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":132250,"byte_end":132262,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":710},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133038,"byte_end":133049,"line_start":139,"line_end":139,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":716}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133657,"byte_end":133669,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/pow.rs","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":750},{"krate":0,"index":756},{"krate":0,"index":4552},{"krate":0,"index":4558},{"krate":0,"index":4564},{"krate":0,"index":4570},{"krate":0,"index":4576},{"krate":0,"index":4582},{"krate":0,"index":4588},{"krate":0,"index":4594},{"krate":0,"index":4600},{"krate":0,"index":4606},{"krate":0,"index":4612},{"krate":0,"index":4618},{"krate":0,"index":4624},{"krate":0,"index":4630},{"krate":0,"index":4636},{"krate":0,"index":4642},{"krate":0,"index":4648},{"krate":0,"index":4654},{"krate":0,"index":4660},{"krate":0,"index":4666},{"krate":0,"index":4672},{"krate":0,"index":4678},{"krate":0,"index":4684},{"krate":0,"index":4690},{"krate":0,"index":4696},{"krate":0,"index":4702},{"krate":0,"index":4708},{"krate":0,"index":4714},{"krate":0,"index":4720},{"krate":0,"index":4726},{"krate":0,"index":4732},{"krate":0,"index":4738},{"krate":0,"index":4744},{"krate":0,"index":4750},{"krate":0,"index":4756},{"krate":0,"index":4762},{"krate":0,"index":4768},{"krate":0,"index":4774},{"krate":0,"index":4780},{"krate":0,"index":4786},{"krate":0,"index":4792},{"krate":0,"index":4798},{"krate":0,"index":4804},{"krate":0,"index":4810},{"krate":0,"index":4816},{"krate":0,"index":4822},{"krate":0,"index":4828},{"krate":0,"index":4834},{"krate":0,"index":4840},{"krate":0,"index":4846},{"krate":0,"index":4852},{"krate":0,"index":4858},{"krate":0,"index":4864},{"krate":0,"index":4870},{"krate":0,"index":4876},{"krate":0,"index":4882},{"krate":0,"index":4888},{"krate":0,"index":4894},{"krate":0,"index":4900},{"krate":0,"index":4906},{"krate":0,"index":4912},{"krate":0,"index":4918},{"krate":0,"index":4924},{"krate":0,"index":4930},{"krate":0,"index":4936},{"krate":0,"index":4942},{"krate":0,"index":4948},{"krate":0,"index":4954},{"krate":0,"index":4960},{"krate":0,"index":4966},{"krate":0,"index":4972},{"krate":0,"index":4978},{"krate":0,"index":4984},{"krate":0,"index":4990},{"krate":0,"index":4996},{"krate":0,"index":5002},{"krate":0,"index":5008},{"krate":0,"index":5014},{"krate":0,"index":5020},{"krate":0,"index":5026},{"krate":0,"index":5032},{"krate":0,"index":5038},{"krate":0,"index":5044},{"krate":0,"index":5050},{"krate":0,"index":5056},{"krate":0,"index":5062},{"krate":0,"index":5068},{"krate":0,"index":5074},{"krate":0,"index":5080},{"krate":0,"index":5086},{"krate":0,"index":5092},{"krate":0,"index":5098},{"krate":0,"index":5104},{"krate":0,"index":5110},{"krate":0,"index":5116},{"krate":0,"index":5122},{"krate":0,"index":5128},{"krate":0,"index":5134},{"krate":0,"index":5140},{"krate":0,"index":5146},{"krate":0,"index":5152},{"krate":0,"index":5158},{"krate":0,"index":5164},{"krate":0,"index":5170},{"krate":0,"index":5176},{"krate":0,"index":5182},{"krate":0,"index":5188},{"krate":0,"index":5194},{"krate":0,"index":5200},{"krate":0,"index":5206},{"krate":0,"index":5212},{"krate":0,"index":5218},{"krate":0,"index":5224},{"krate":0,"index":5230},{"krate":0,"index":5236},{"krate":0,"index":5242},{"krate":0,"index":5248},{"krate":0,"index":5254},{"krate":0,"index":5260},{"krate":0,"index":5266},{"krate":0,"index":5272},{"krate":0,"index":5278},{"krate":0,"index":5284},{"krate":0,"index":5290},{"krate":0,"index":5296},{"krate":0,"index":5302},{"krate":0,"index":5308},{"krate":0,"index":5314},{"krate":0,"index":5320},{"krate":0,"index":5326},{"krate":0,"index":5332},{"krate":0,"index":5338},{"krate":0,"index":5344},{"krate":0,"index":5350},{"krate":0,"index":5356},{"krate":0,"index":5362},{"krate":0,"index":5368},{"krate":0,"index":5374},{"krate":0,"index":5380},{"krate":0,"index":5386},{"krate":0,"index":5392},{"krate":0,"index":5398},{"krate":0,"index":5404},{"krate":0,"index":5410},{"krate":0,"index":5416},{"krate":0,"index":5422},{"krate":0,"index":5428},{"krate":0,"index":5434},{"krate":0,"index":5440},{"krate":0,"index":5446},{"krate":0,"index":5452},{"krate":0,"index":5458},{"krate":0,"index":5464},{"krate":0,"index":5470},{"krate":0,"index":5476},{"krate":0,"index":5482},{"krate":0,"index":5488},{"krate":0,"index":5494},{"krate":0,"index":5500},{"krate":0,"index":5506},{"krate":0,"index":5512},{"krate":0,"index":5518},{"krate":0,"index":5524},{"krate":0,"index":5530},{"krate":0,"index":5536},{"krate":0,"index":5542},{"krate":0,"index":5548},{"krate":0,"index":5554},{"krate":0,"index":5560},{"krate":0,"index":5566},{"krate":0,"index":5572},{"krate":0,"index":5578},{"krate":0,"index":5584},{"krate":0,"index":5590},{"krate":0,"index":5596},{"krate":0,"index":5602},{"krate":0,"index":5608},{"krate":0,"index":5614},{"krate":0,"index":5620},{"krate":0,"index":5626},{"krate":0,"index":5632},{"krate":0,"index":5638},{"krate":0,"index":5644},{"krate":0,"index":5650},{"krate":0,"index":5656},{"krate":0,"index":5662},{"krate":0,"index":5668},{"krate":0,"index":5674},{"krate":0,"index":5680},{"krate":0,"index":5686},{"krate":0,"index":5692},{"krate":0,"index":5698},{"krate":0,"index":5704},{"krate":0,"index":5710},{"krate":0,"index":5716},{"krate":0,"index":5722},{"krate":0,"index":5728},{"krate":0,"index":5734},{"krate":0,"index":5740},{"krate":0,"index":5746},{"krate":0,"index":5752},{"krate":0,"index":5758},{"krate":0,"index":5764},{"krate":0,"index":5770},{"krate":0,"index":5776},{"krate":0,"index":5782},{"krate":0,"index":5788},{"krate":0,"index":5794},{"krate":0,"index":5800},{"krate":0,"index":5806},{"krate":0,"index":5812},{"krate":0,"index":5818},{"krate":0,"index":5824},{"krate":0,"index":5830},{"krate":0,"index":5836},{"krate":0,"index":5842},{"krate":0,"index":5848},{"krate":0,"index":5854},{"krate":0,"index":5860},{"krate":0,"index":5866},{"krate":0,"index":5872},{"krate":0,"index":5878},{"krate":0,"index":5884},{"krate":0,"index":5890},{"krate":0,"index":5896},{"krate":0,"index":5902},{"krate":0,"index":5908},{"krate":0,"index":5914},{"krate":0,"index":5920},{"krate":0,"index":5926},{"krate":0,"index":5932},{"krate":0,"index":5938},{"krate":0,"index":5944},{"krate":0,"index":5950},{"krate":0,"index":5956},{"krate":0,"index":5962},{"krate":0,"index":5968},{"krate":0,"index":5974},{"krate":0,"index":5980},{"krate":0,"index":5986},{"krate":0,"index":5992},{"krate":0,"index":5998},{"krate":0,"index":6004},{"krate":0,"index":6010},{"krate":0,"index":6016},{"krate":0,"index":6022},{"krate":0,"index":6028},{"krate":0,"index":6034},{"krate":0,"index":6040},{"krate":0,"index":6046},{"krate":0,"index":6052},{"krate":0,"index":6058},{"krate":0,"index":6064},{"krate":0,"index":6070},{"krate":0,"index":6076},{"krate":0,"index":6082},{"krate":0,"index":6088},{"krate":0,"index":6094},{"krate":0,"index":6100},{"krate":0,"index":6106},{"krate":0,"index":6112},{"krate":0,"index":6118},{"krate":0,"index":6124},{"krate":0,"index":6130},{"krate":0,"index":6136},{"krate":0,"index":6142},{"krate":0,"index":6148},{"krate":0,"index":6154},{"krate":0,"index":6160},{"krate":0,"index":6166},{"krate":0,"index":6172},{"krate":0,"index":6178},{"krate":0,"index":6184},{"krate":0,"index":6190},{"krate":0,"index":6196},{"krate":0,"index":6202},{"krate":0,"index":6208},{"krate":0,"index":6214},{"krate":0,"index":6220},{"krate":0,"index":6226},{"krate":0,"index":6232},{"krate":0,"index":6238},{"krate":0,"index":6244},{"krate":0,"index":6250},{"krate":0,"index":6256},{"krate":0,"index":6262},{"krate":0,"index":6268},{"krate":0,"index":6274},{"krate":0,"index":758},{"krate":0,"index":760}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137316,"byte_end":137319,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":754}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137384,"byte_end":137390,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137579,"byte_end":137582,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":142229,"byte_end":142232,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":142212,"byte_end":142221,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":143239,"byte_end":143250,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":143222,"byte_end":143231,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/garry/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/sign.rs","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":786},{"krate":0,"index":6280},{"krate":0,"index":6292},{"krate":0,"index":6304},{"krate":0,"index":6316},{"krate":0,"index":6328},{"krate":0,"index":6340},{"krate":0,"index":788},{"krate":0,"index":800},{"krate":0,"index":6352},{"krate":0,"index":6364},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":6376},{"krate":0,"index":6378},{"krate":0,"index":6380},{"krate":0,"index":6382},{"krate":0,"index":6384},{"krate":0,"index":6386},{"krate":0,"index":812}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144115,"byte_end":144121,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144374,"byte_end":144377,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144602,"byte_end":144609,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":145067,"byte_end":145073,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":145190,"byte_end":145201,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":145318,"byte_end":145329,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":148523,"byte_end":148526,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":148498,"byte_end":148515,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":148763,"byte_end":148770,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":148738,"byte_end":148755,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149214,"byte_end":149220,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149189,"byte_end":149206,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":808},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149329,"byte_end":149337,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1982,"byte_end":1985,"line_start":62,"line_end":62,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":818}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2030,"byte_end":2045,"line_start":63,"line_end":63,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2403,"byte_end":2417,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":814},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2639,"byte_end":2645,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3280,"byte_end":3286,"line_start":107,"line_end":107,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3611,"byte_end":3617,"line_start":118,"line_end":118,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3956,"byte_end":3968,"line_start":128,"line_end":128,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4379,"byte_end":4388,"line_start":142,"line_end":142,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4690,"byte_end":4702,"line_start":153,"line_end":153,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1151},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5830,"byte_end":5835,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":6460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1153},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5841,"byte_end":5848,"line_start":194,"line_end":194,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":6460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6460},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5809,"byte_end":5823,"line_start":192,"line_end":192,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1153}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6466},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6006,"byte_end":6021,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":1155}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1155},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6032,"byte_end":6036,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":6466},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14087,"byte_end":14092,"line_start":381,"line_end":381,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14070,"byte_end":14079,"line_start":380,"line_end":380,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":19064,"byte_end":19072,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39161,"byte_end":39169,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2058},{"krate":0,"index":2060},{"krate":0,"index":2062},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39937,"byte_end":39945,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2094},{"krate":0,"index":2096},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":41853,"byte_end":41861,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99793,"byte_end":99801,"line_start":62,"line_end":62,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101501,"byte_end":101509,"line_start":137,"line_end":137,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134483,"byte_end":134491,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134683,"byte_end":134691,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134883,"byte_end":134891,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135083,"byte_end":135091,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135289,"byte_end":135297,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":146211,"byte_end":146219,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149599,"byte_end":149607,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3341,"byte_end":3342,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3711,"byte_end":3712,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4109,"byte_end":4110,"line_start":133,"line_end":133,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4434,"byte_end":4435,"line_start":143,"line_end":143,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4775,"byte_end":4776,"line_start":154,"line_end":154,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":689,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5389,"line_start":177,"line_end":177,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":690,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6079,"byte_end":6094,"line_start":203,"line_end":203,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1690,"byte_end":1696,"line_start":49,"line_end":49,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":130}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1706,"byte_end":1710,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":190}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1720,"byte_end":1725,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":342}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1735,"byte_end":1745,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":458}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1755,"byte_end":1758,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":498}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1768,"byte_end":1771,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":562}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112186,"byte_end":112193,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":564}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112203,"byte_end":112206,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":620}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112216,"byte_end":112223,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":652}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112233,"byte_end":112243,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":668}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112253,"byte_end":112261,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":678}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1781,"byte_end":1784,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":738}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1832,"byte_end":1836,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":764}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":19064,"byte_end":19072,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":170}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32352,"byte_end":32357,"line_start":364,"line_end":364,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":284}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39161,"byte_end":39169,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":234}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39937,"byte_end":39945,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":284}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40780,"byte_end":40785,"line_start":640,"line_end":640,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":326}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40788,"byte_end":40799,"line_start":640,"line_end":640,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":234},"to":{"krate":0,"index":326}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":41853,"byte_end":41861,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":326}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43093,"byte_end":43097,"line_start":718,"line_end":718,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1682},"to":{"krate":0,"index":336}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44862,"byte_end":44865,"line_start":13,"line_end":13,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":362}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44868,"byte_end":44875,"line_start":13,"line_end":13,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":326},"to":{"krate":0,"index":362}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44878,"byte_end":44881,"line_start":13,"line_end":13,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1784},"to":{"krate":0,"index":362}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44899,"byte_end":44909,"line_start":13,"line_end":13,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2424},"to":{"krate":0,"index":362}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44912,"byte_end":44916,"line_start":13,"line_end":13,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1682},"to":{"krate":0,"index":362}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98509,"byte_end":98514,"line_start":5,"line_end":5,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":468}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98517,"byte_end":98520,"line_start":5,"line_end":5,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1740},"to":{"krate":0,"index":468}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99793,"byte_end":99801,"line_start":62,"line_end":62,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[284]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":468}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100054,"byte_end":100059,"line_start":75,"line_end":75,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":482}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100062,"byte_end":100065,"line_start":75,"line_end":75,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1756},"to":{"krate":0,"index":482}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101501,"byte_end":101509,"line_start":137,"line_end":137,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[299]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":482}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102809,"byte_end":102814,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102821,"byte_end":102825,"line_start":10,"line_end":10,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1682},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102832,"byte_end":102835,"line_start":11,"line_end":11,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102842,"byte_end":102849,"line_start":12,"line_end":12,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":326},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102856,"byte_end":102863,"line_start":13,"line_end":13,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":170},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102870,"byte_end":102880,"line_start":14,"line_end":14,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2424},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102887,"byte_end":102890,"line_start":15,"line_end":15,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2406},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102897,"byte_end":102899,"line_start":16,"line_end":16,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2376},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102906,"byte_end":102909,"line_start":17,"line_end":17,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1828},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102931,"byte_end":102937,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1836},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102959,"byte_end":102964,"line_start":19,"line_end":19,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1844},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102986,"byte_end":102992,"line_start":20,"line_end":20,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1852},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103014,"byte_end":103017,"line_start":21,"line_end":21,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1860},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103046,"byte_end":103049,"line_start":22,"line_end":22,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1870},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103078,"byte_end":103088,"line_start":23,"line_end":23,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":582},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103110,"byte_end":103120,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":588},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103142,"byte_end":103152,"line_start":25,"line_end":25,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":592},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103174,"byte_end":103184,"line_start":26,"line_end":26,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":596},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103206,"byte_end":103216,"line_start":27,"line_end":27,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":670},"to":{"krate":0,"index":526}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112425,"byte_end":112430,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":582}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112433,"byte_end":112436,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1740},"to":{"krate":0,"index":582}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113566,"byte_end":113571,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":588}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113574,"byte_end":113577,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1748},"to":{"krate":0,"index":588}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114469,"byte_end":114474,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":592}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114477,"byte_end":114480,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1756},"to":{"krate":0,"index":592}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115437,"byte_end":115442,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":596}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115445,"byte_end":115448,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1764},"to":{"krate":0,"index":596}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116424,"byte_end":116429,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":600}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116432,"byte_end":116435,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1774},"to":{"krate":0,"index":600}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118203,"byte_end":118208,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":606}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119623,"byte_end":119628,"line_start":199,"line_end":199,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":610}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119631,"byte_end":119634,"line_start":199,"line_end":199,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1860},"to":{"krate":0,"index":610}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121202,"byte_end":121207,"line_start":244,"line_end":244,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":616}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121210,"byte_end":121213,"line_start":244,"line_end":244,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1870},"to":{"krate":0,"index":616}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128694,"byte_end":128699,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":696}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128702,"byte_end":128705,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1740},"to":{"krate":0,"index":696}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129588,"byte_end":129593,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129596,"byte_end":129599,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1748},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130488,"byte_end":130493,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":704}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130496,"byte_end":130499,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1756},"to":{"krate":0,"index":704}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131645,"byte_end":131650,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":710}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131653,"byte_end":131656,"line_start":104,"line_end":104,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1860},"to":{"krate":0,"index":710}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133051,"byte_end":133056,"line_start":139,"line_end":139,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":714}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133059,"byte_end":133062,"line_start":139,"line_end":139,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1870},"to":{"krate":0,"index":714}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134483,"byte_end":134491,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[506]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":696}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134683,"byte_end":134691,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[507]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134883,"byte_end":134891,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[508]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":704}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135083,"byte_end":135091,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[509]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":710}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135289,"byte_end":135297,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[510]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":714}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144123,"byte_end":144128,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1678},"to":{"krate":0,"index":774}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144131,"byte_end":144134,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":774}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":144137,"byte_end":144140,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1784},"to":{"krate":0,"index":774}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":146211,"byte_end":146219,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[661]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":774}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149339,"byte_end":149342,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":808}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":149599,"byte_end":149607,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[670]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":808}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1987,"byte_end":1996,"line_start":62,"line_end":62,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2370},"to":{"krate":0,"index":814}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1999,"byte_end":2003,"line_start":62,"line_end":62,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":468},"to":{"krate":0,"index":814}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2006,"byte_end":2009,"line_start":62,"line_end":62,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":482},"to":{"krate":0,"index":814}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2012,"byte_end":2018,"line_start":62,"line_end":62,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":820},"to":{"krate":0,"index":814}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2678,"byte_end":2681,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1740},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2710,"byte_end":2713,"line_start":86,"line_end":86,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1748},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2742,"byte_end":2745,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1756},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2774,"byte_end":2777,"line_start":88,"line_end":88,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1764},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2806,"byte_end":2809,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1774},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"kind":{"variant":"Impl","fields":[671]},"from":{"krate":0,"index":87},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3288,"byte_end":3291,"line_start":107,"line_end":107,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3302,"byte_end":3308,"line_start":107,"line_end":107,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":820},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3341,"byte_end":3342,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"kind":{"variant":"Impl","fields":[672]},"from":{"krate":0,"index":95},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3625,"byte_end":3631,"line_start":118,"line_end":118,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":820},"to":{"krate":0,"index":828}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3654,"byte_end":3660,"line_start":118,"line_end":118,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":820},"to":{"krate":0,"index":828}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3711,"byte_end":3712,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"kind":{"variant":"Impl","fields":[673]},"from":{"krate":0,"index":103},"to":{"krate":0,"index":828}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3986,"byte_end":3995,"line_start":129,"line_end":129,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1796},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4003,"byte_end":4012,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1802},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4020,"byte_end":4029,"line_start":129,"line_end":129,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1808},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4037,"byte_end":4046,"line_start":129,"line_end":129,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1814},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4054,"byte_end":4063,"line_start":129,"line_end":129,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4109,"byte_end":4110,"line_start":133,"line_end":133,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[674]},"from":{"krate":0,"index":111},"to":{"krate":0,"index":832}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4390,"byte_end":4393,"line_start":142,"line_end":142,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":814},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4396,"byte_end":4408,"line_start":142,"line_end":142,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":832},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4434,"byte_end":4435,"line_start":143,"line_end":143,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[675]},"from":{"krate":0,"index":115},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4704,"byte_end":4713,"line_start":153,"line_end":153,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":836},"to":{"krate":0,"index":840}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4724,"byte_end":4736,"line_start":153,"line_end":153,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":832},"to":{"krate":0,"index":840}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4775,"byte_end":4776,"line_start":154,"line_end":154,"column_start":26,"column_end":27},"kind":{"variant":"Impl","fields":[676]},"from":{"krate":0,"index":119},"to":{"krate":0,"index":840}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5389,"line_start":177,"line_end":177,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[689]},"from":{"krate":1,"index":12370},"to":{"krate":0,"index":814}},{"span":{"file_name":[47,104,111,109,101,47,103,97,114,114,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6079,"byte_end":6094,"line_start":203,"line_end":203,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[690]},"from":{"krate":0,"index":6466},"to":{"krate":1,"index":8150}}]}